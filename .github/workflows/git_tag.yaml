# This is a workflow to build AMI with ICAP server

name: get-tag
env:
  AWS_DEFAULT_REGION: eu-west-1
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:

      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ami:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it  
    - uses: actions/checkout@v2
      with:
        submodules: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get Release tag name
      id: get_rel_tag
      run: |
        pwd
        git fetch --tags
        git tag -l --contains ${{ github.sha }}
        latest_tag=$(git tag -l --contains ${{ github.sha }})
        latest_tag=${latest_tag:-null}
        echo ::set-output name=latest_tag::$latest_tag
        mkdir -p artifacts_staging
        echo $latest_tag > artifacts_staging/latest_tag.txt

    - name: upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: tag-name
        path: artifacts_staging
  
  deploy-ami:
    runs-on: ubuntu-latest
    needs: build-ami
    steps:
      - name: Download the artifacts
        uses: actions/download-artifact@v2
        with:
          name: tag-name
      - name: Get Release versions
        id: get_rel_tag
        run: |
          latest_tag=$(cat latest_tag.txt)
          prod_sdk_version=$(cat prod_sdk_version.txt || true)
          latest_tag=${latest_tag:-null}
          echo ::set-output name=latest_tag::$latest_tag
          echo ::set-output name=sdk_version::$sdk_version
          echo ::set-output name=prod_sdk_version::$prod_sdk_version

      - name: Checkout submodules
        uses: actions/checkout@v2
        with:
          repository: k8-proxy/vmware-scripts
          path: vmware-scripts

      - uses: actions/checkout@v2
        with:
            token: ${{secrets.GITHUB_TOKEN}} 
      - name: Update github tag with AMI/OVA
        if: ${{ steps.get_rel_tag.outputs.latest_tag != 'null' }}
        run: |
          latest_tag=${{ steps.get_rel_tag.outputs.latest_tag }}
          ami_id="{{ steps.deploy.outputs.ami_id }}"
          new_desc="Eval AMI: $ami_id"
          if [[ "${{ github.event.inputs.create_ova }}" == "true" ]]; then
            ova_path="${{ steps.deploy.outputs.ova_path }}"
            new_desc="${new_desc} \nEval OVA: $ova_path"
          fi
          if [[ "${{ github.ref }}" == 'refs/heads/use_develop' ]]; then
            prd_ami_id="{{ steps.prd.outputs.ami_id }}"
            new_desc="${new_desc} \nProd AMI: $prd_ami_id"
            if [[ "${{ github.event.inputs.create_ova }}" == "true" ]]; then
              prd_ova_path="${{ steps.prd.outputs.ova_path }}"
              new_desc="${new_desc} \nProd OVA: $prd_ova_path"
            fi
          fi
          git fetch --tags
          tag_desc=$(git tag -l --format='%(contents)' $latest_tag)
          printf "$tag_desc \n$new_desc"
          echo git tag -m $latest_tag -m $tag_desc -m "$(echo $new_desc)" -f --edit $latest_tag
          git config user.name github-actions@github.com
          git config user.email github-actions
          git tag -m $latest_tag -m $tag_desc -m "$(echo $new_desc)" -f $latest_tag
          git push origin $latest_tag --force
